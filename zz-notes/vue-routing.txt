// ---------- VUE ROUTING ---------- \\

- installo il pacchetto vue router che gestirà tutte le rotte del frontend organizzato con Vue 2:
    npm i vue-router@3.5.3

- in routes > web.php elimino la rotta verso la pagina welcome.blade.php;

- in resources > views elimino la pagina welcome.blade.php;

- in resources > js creo il file 'router.js';

- in resources > js > router.js creo l'oggetto router che gestirà le rotte frontoffice:

    // importo Vue.js dalla node modules
    import Vue from "vue";

    // importo Vue router dalla node modules
    import VueRouter from "vue-router";

    // uso il metodo Vue.Use() che mi permette di aggiungere il plug-in VueRouter all'istanza di Vue.js
    Vue.use(VueRouter);

    // importo il componente che restituirà la pagina Home (si deve creare)
    import Home from "./pages/Home";

    // salvo nella const router il nuovo oggetto VueRouter partendo dalla classe VueRouter
    const router = new VueRouter({

        // aggiungo la possibilità di navigare 'all'indietro'
        mode: "history",

        // aggiungo le rotte della parte frontoffice come array di oggetti. Ogni oggetto rappresenta una rotta frontoffice
        routes: [
            {
                path: "/",
                name: "home",
                component: Home,
            },
        ],
    });

    // esportiamo il nuovo router
    export default router;

- in resources > js > front.js importo l'oggetto router appena creato per poterlo utilizzare:

    // importo il nuovo oggetto router
    import router from './router';

    // renderizzo App all'avvio
    const app = new Vue({
        el: '#app',
        render: h => h(App),

        // importo il router come terzo argomento del costruttore di Vue.js
        router,
    });

- in resources > js > creo una cartella 'pages';

- in resources > js > > pages creo i componenti che renderizzeranno tutte le pagine del frontoffice;

- al posto del tag <a> utilizzo il tag html <router-link></router-link> all'interno dei template per creare link alle rotte gestite da vue router:

    <router-link :to="{ name: routeName }">Label</router-link>

- aggiunta di pagina di errore 404 a cui rimandare in caso di rotta/URI assente (CATCH ALL):

    - in resources > js > pages creo il componente Page404;

    - in resources > js > router.js:

        - importo il componente Page404:
        
            import Page404 from "./pages/Page404";
    
        - definisco la rotta che condurrà al componente che renderizzerà la pagina di errore:

            const router = new VueRouter({

                routes: [
                    // aggiungo la rotta per visualizzare la pagina di errore 404 SEMPRE ALLA FINE (dopo aver cercato tra tutte le altre rotte)
                    {
                        // * = qualsiasi rotta/URI
                        path: "/*",
                        name: "page-404",
                        component: Page404,
                    },
                ],
            });

- aggiunta della pagina che visualizza il post singolo usando lo slug:

    - in resources > js > pages creo il componente SinglePost;

    - in resources > js > router.js:

        - importo il componente SinglePost:
        
            import SinglePost from "./pages/SinglePost";
    
        - definisco la rotta che condurrà al componente che renderizzerà la pagina del singolo post:

            const router = new VueRouter({

                routes: [

                    // aggiungo la rotta PARAMETRICA o DINAMICA (:) per visualizzare la pagina di ogni singolo post
                    {
                        // uso :slug invece di :id come parametro dinamico (diverso per ogni singolo post)
                        path: "/posts/:slug",
                        name: "single-post",
                        component: SinglePost,
                    },
                ],
            });

    - in routes > api.php creo l'endpoint che restituirà le informazioni relative al singolo post:

        // imposto l'endpoint che deve restituire il singolo post (e tutte le sue informazioni) attraverso il metodo show del PostController con namespace Api. Tra le graffe metterò la proprietà univoca che identifica quel post rispetto ad un altro
        Route::get('posts/{slug}', 'Api\PostController@show');

    - in app > Http > Controllers > Api > PostController.php creo il metodo show che deve restituire la vista del singolo post:

            // passo lo slug come argomento del metodo show. Questa è l'informazione parametrica che gestisce la vista di un post rispetto ad un altro
            public function show($slug) {

                // attraverso una query filtro i dati che voglio. In questo caso il PRIMO POST DOVE dove lo slug è questo $slug (il parametro passato) INSIEME (inner join) ai dati delle tabelle relazionate (i nomi dei metodi nei model)
                $post = Post::where('slug', $slug)->with(['category', 'tags', 'user'])->first();

                // restituisco il risultato della query in formato json
                return response()->json($post);
            }

    - in resources > js > pages > SinglePost:

        - imposto nei data() un singolo post con valore null;

        - all'hook created() faccio la chiamata axios e assegno il risultato della risposta alla chiamata come valore del singolo pos:

            created() {

                // imposto una chiamata Axios all'endpoint parametrico attraverso l'uso del template literal
                axios.get(`/api/posts/${this.$route.params.slug}`)

                .then((response) => {

                    // assegno al singolo post il valore della risposta alla chiamata axios (response)
                    this.post = response.data;
                }) 
            },

    - creo i link necessari ad arrivare a questa pagina. Per inserire una rotta parametrica nel router-link, inserisco params: {prop:proprietà} come secondo parametro dell'attributo :to :
    
        <router-link :to="{name: 'single-post', params: {slug:slug} }">Read more</router-link>

