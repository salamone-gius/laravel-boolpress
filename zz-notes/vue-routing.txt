// ---------- VUE ROUTING ---------- \\

- installo il pacchetto vue router che gestirà tutte le rotte del frontend organizzato con Vue 2:
    npm i vue-router@3.5.3

- in routes > web.php elimino la rotta verso la pagina welcome.blade.php;

- in resources > views elimino la pagina welcome.blade.php;

- in resources > js creo il file 'router.js';

- in resources > js > router.js creo l'oggetto router che gestirà le rotte frontoffice:

    // importo Vue.js dalla node modules
    import Vue from "vue";

    // importo Vue router dalla node modules
    import VueRouter from "vue-router";

    // uso il metodo Vue.Use() che mi permette di aggiungere il plug-in VueRouter all'istanza di Vue.js
    Vue.use(VueRouter);

    // importo il componente che restituirà la pagina Home (si deve creare)
    import Home from "./pages/Home";

    // salvo nella const router il nuovo oggetto VueRouter partendo dalla classe VueRouter
    const router = new VueRouter({

        // aggiungo la possibilità di navigare 'all'indietro'
        mode: "history",

        // aggiungo le rotte della parte frontoffice come array di oggetti. Ogni oggetto rappresenta una rotta frontoffice
        routes: [
            {
                path: "/",
                name: "home",
                component: Home,
            },
        ],
    });

    // esportiamo il nuovo router
    export default router;

- in resources > js > front.js importo l'oggetto router appena creato per poterlo utilizzare:

    // importo il nuovo oggetto router
    import router from './router';

    // renderizzo App all'avvio
    const app = new Vue({
        el: '#app',
        render: h => h(App),

        // importo il router come terzo argomento del costruttore di Vue.js
        router,
    });

- in resources > js > creo una cartella 'pages';

- in resources > js > > pages creo i componenti che renderizzeranno tutte le pagine del frontoffice;

- al posto del tag <a> utilizzo il tag html <router-link></router-link> all'interno dei template per creare link alle rotte gestite da vue router:

    <router-link :to="{ name: routeName }">Label</router-link>

- aggiunta di pagina di errore 404 a cui rimandare in caso di rotta/URI assente (CATCH ALL):

    - in resources > js > pages creo il componente Page404;

    - in resources > js > router.js:

        - importo il componente Page404:
        
            import Page404 from "./pages/Page404";
    
        - definisco la rotta che condurrà al componente che renderizzerà la pagina di errore:

            const router = new VueRouter({

                routes: [
                    // aggiungo la rotta per visualizzare la pagina di errore 404 SEMPRE ALLA FINE (dopo aver cercato tra tutte le altre rotte)
                    {
                        // * = qualsiasi rotta/URI
                        path: "/*",
                        name: "page-404",
                        component: Page404,
                    },
                ],
            });

- aggiunta della pagina che visualizza il post singolo usando lo slug:

    - in resources > js > pages creo il componente SinglePost;

    - in resources > js > router.js:

        - importo il componente SinglePost:
        
            import SinglePost from "./pages/SinglePost";
    
        - definisco la rotta che condurrà al componente che renderizzerà la pagina del singolo post:

            const router = new VueRouter({

                routes: [

                    // aggiungo la rotta PARAMETRICA o DINAMICA (:) per visualizzare la pagina di ogni singolo post
                    {
                        // uso :slug invece di :id come parametro dinamico (diverso per ogni singolo post)
                        path: "/posts/:slug",
                        name: "single-post",
                        component: SinglePost,
                    },
                ],
            });

    - in routes > api.php creo l'endpoint che restituirà le informazioni relative al singolo post:

        // imposto l'endpoint che deve restituire il singolo post (e tutte le sue informazioni) attraverso il metodo show del PostController con namespace Api. Tra le graffe metterò la proprietà univoca che identifica quel post rispetto ad un altro
        Route::get('posts/{slug}', 'Api\PostController@show');

    - in app > Http > Controllers > Api > PostController.php creo il metodo show che deve restituire la vista del singolo post:

            // passo lo slug come argomento del metodo show. Questa è l'informazione parametrica che gestisce la vista di un post rispetto ad un altro
            public function show($slug) {

                // attraverso una query filtro i dati che voglio. In questo caso il PRIMO POST DOVE dove lo slug è questo $slug (il parametro passato) INSIEME (inner join) ai dati delle tabelle relazionate (i nomi dei metodi nei model)
                $post = Post::where('slug', $slug)->with(['category', 'tags', 'user'])->first();

                // restituisco il risultato della query in formato json
                return response()->json($post);
            }

    - in resources > js > pages > SinglePost:

        - imposto nei data() un singolo post con valore null;

        - all'hook created() faccio la chiamata axios e assegno il risultato della risposta alla chiamata come valore del singolo pos:

            created() {

                // imposto una chiamata Axios all'endpoint parametrico attraverso l'uso del template literal
                axios.get(`/api/posts/${this.$route.params.slug}`)

                .then((response) => {

                    // assegno al singolo post il valore della risposta alla chiamata axios (response)
                    this.post = response.data;
                }) 
            },

    - creo i link necessari ad arrivare a questa pagina. Per inserire una rotta parametrica nel router-link, inserisco params: {prop:proprietà} come secondo parametro dell'attributo :to :

        <router-link :to="{name: 'single-post', params: {slug:slug} }">Read more</router-link>

- risolvo l'errore dato dalla richiesta asincrona (alla prima visualizzazione della pagina non ci sono ancora arrivati i dati dalla chiamata axios, quindi all'inizio il loro valore è null) con un semplice v-if che dice:"stampa se/quando c'è l'elemento che arriva da axios". Devo aggiungere questo controllo in tutti i componenti che fanno chiamate ad axios.

- aggiungo un controllo per la gestione dell'arrivo di json vuoti:

    - in app > Http > Controllers > Api > PostController.php nel metodo show() aggiungo un controllo:

        // SE $post è VUOTO...
        if (empty($post)) {
            // ... stampa un MESSAGGIO con testo PAGE NOT FOUND e lo stato 404
            return response()->json(['message' => 'Post not found'], 404);
        }

    - in resources > js > pages > SinglePost.vue aggiungo un redirect alla pagina 404 al metodo catch() della chiamata axios:

        // se mi arriva una risposta negativa dal server...
        .catch((error) => {
            // ... faccio un redirect a Page404
            this.$router.push({name: 'page-404'});
        })


------------------------------------- AGGIUNGO LA PAGINA CON TUTTE LE CATEGORIE (1 - 7)---------------------------------------
------------------------------ CLICCANDO SULLA SINGOLA CATEGORIA, MOSTRO I POST ASSOCIATI (8 - 12)------------------------------


    1. creo un controller dedicato alle categorie con namespace Api:
        php artisan make:controller Api/TagController


    2. in routes > api.php imposto la rotta che deve restituire tutte le categorie da gestire con il metodo index() del TagController con namespace Api:

        Route::get('categories', 'Api\TagController@index');


    3. in app > Http > Controllers > Api > TagController.php:

        - importo il modello delle categorie:

            use App\Category;

        - creo il metodo index() che mi restituisce tutte le categorie:

            public function index() {

                $categories = Category::all();

                return $categories;
            }


    4. in resources > js > pages creo il componente Categories;


    5. in resources > js > router.js:

        - importo il componente Categories:
        
            import Categories from "./pages/Categories";
    
        - definisco la rotta che condurrà al componente Categories che renderizzerà la pagina con tutte le categorie:

            const router = new VueRouter({

                routes: [

                    {
                        path: "/categories",
                        name: "categories",
                        component: Categories,
                    },
                ],
            });


    6. in resources > js > pages > Categories:

        - imposto nei data() le categorie con valore array vuoto:

            data() {
                return {
                    categories: [],
                }
            },

        - all'hook created() faccio la chiamata axios all'endpoint e assegno il risultato della risposta alla chiamata come valore dell'array vuoto categories:

            created() {

                // con axios contatto l'endpoint
                axios.get('/api/categories')

                .then((response) => {

                    // assegno la risposta dell'endpoint come valore dell'array categories
                    this.categories = response.data;
                })
            }

        - se ci sono (controllo v-if/v-else) stampo in pagina un elenco di tutte le categorie, altrimenti un messaggio:

            <h1>All Categories</h1>
            <ul v-if="categories.length > 0">
                <li v-for="category in categories" :key="category.id">
                    {{category.name}}
                </li>
            </ul>
            <h1 v-else>There are no categories</h1>


    7. in resources > js > components > macro > BaseHeader creo il router-link per la pagina con tutte le categorie:

        <router-link :to="{ name: 'categories' }">Categories</router-link>


    8. in routes > api.php creo la rotta dinamica/parametrica che deve restituire tutti i post associati alla singola categoria (con lo slug come parametro) da gestire con il metodo show() del TagController con namespace Api:

        Route::get('categories/{slug}', 'Api\TagController@show');


    9. in app > Http > Controllers > Api > TagController.php:

        - creo il metodo show() che mi restituisce tutti i post associati alla singola categoria:

            // passo lo slug con la dependancy injection
            public function show($slug) {

                // attraverso una query prendo la PRIMA categoria DOVE la proprietà slug è uguale allo $slug passato come argomento del metodo INSIEME CON tutte le relazioni con la tabella posts
                $category = Category::where('slug', $slug)->with('posts')->first();
                
                // restituisco la singola categoria con le relazioni con i post
                return $category;
            }


    10. in resources > js > pages creo il componente SingleCategory;


    11. in resources > js > router.js:

        - importo il componente SingleCategory:
        
            import SingleCategory from "./pages/SingleCategory";
    
        - definisco la rotta PARAMETRICA o DINAMICA che condurrà al componente SingleCategory che renderizzerà la pagina della singola categoria con tutti i post ad essa associati:

            {
                // uso :slug invece di :id come parametro dinamico (diverso per ogni singola categoria)
                path: "/categories/:slug",
                name: "single-category",
                component: SingleCategory,
            },


    12. in resources > js > pages > SingleCategory:

        - imposto nei data() la singola categoria con valore null:

            data() {
                return {
                    category: null,
                }
            },

        - all'hook created() faccio la chiamata axios all'endpoint e assegno il risultato della risposta alla chiamata come valore della category null:

            created() {

                // imposto una chiamata Axios all'endpoint parametrico attraverso l'uso del template literal
                axios.get(`/api/categories/${this.$route.params.slug}`)
                
                .then((response) => {

                    // assegno alla singola categoria il valore della risposta alla chiamata axios (response)
                    this.category = response.data;
                })
            }

        - se ci sono (controllo v-if/v-else) stampo in pagina un elenco di tutte le categorie, altrimenti un messaggio:

            <template v-if="category.posts.length > 0">
                <div v-if="category" class="category-box">
                    <h1>All posts with "{{category.name}}" category:</h1>
                    <ul>
                        <li v-for="post in category.posts" :key="post.id">
                            <h4>{{post.title}}</h4>
                        </li>
                    </ul>
                </div>
            </template>
            <div v-else>
                <h2>There are no related posts</h2>
            </div>



------------------------------------- AGGIUNGO LA PAGINA CON TUTTI I TAG (1 - 7)---------------------------------------
------------------------------ CLICCANDO SUL SINGOLO TAG, MOSTRO I POST ASSOCIATI (8 - 12)------------------------------


    1. creo un controller dedicato alle categorie con namespace Api:
        php artisan make:controller Api/TagController


    2. in routes > api.php imposto la rotta che deve restituire tutte le categorie da gestire con il metodo index() del TagController con namespace Api:

        Route::get('categories', 'Api\TagController@index');


    3. in app > Http > Controllers > Api > TagController.php:

        - importo il modello delle categorie:

            use App\Tag;

        - creo il metodo index() che mi restituisce tutte le categorie:

            public function index() {

                $tags = Tag::all();

                return $tags;
            }


    4. in resources > js > pages creo il componente Tags;


    5. in resources > js > router.js:

        - importo il componente Tags:
        
            import Tags from "./pages/Tags";
    
        - definisco la rotta che condurrà al componente Tags che renderizzerà la pagina con tutte le categorie:

            const router = new VueRouter({

                routes: [

                    {
                        path: "/tags",
                        name: "tags",
                        component: Tag,
                    },
                ],
            });


    6. in resources > js > pages > Tags:

        - imposto nei data() i tag con valore array vuoto:

            data() {
                return {
                    tags: [],
                }
            },

        - all'hook created() faccio la chiamata axios all'endpoint e assegno il risultato della risposta alla chiamata come valore dell'array vuoto tags:

            created() {

                // con axios contatto l'endpoint
                axios.get('/api/tags')

                .then((response) => {

                    // assegno la risposta dell'endpoint come valore dell'array tags
                    this.tags = response.data;
                })
            }

        - se ci sono (controllo v-if/v-else) stampo in pagina un elenco di tutti tag, altrimenti un messaggio:

            <h1>All Tags</h1>
            <ul v-if="tags.length > 0">
                <li v-for="tag in tags" :key="tags.id">
                    {{tag.name}}
                </li>
            </ul>
            <h1 v-else>There are no tags</h1>


    7. in resources > js > components > macro > BaseHeader creo il router-link per la pagina con tutti i tag:

        <router-link :to="{ name: 'tags' }">Tags</router-link>


    8. in routes > api.php creo la rotta dinamica/parametrica che deve restituire tutti i post associati al singolo tag (con lo slug come parametro) da gestire con il metodo show() del TagController con namespace Api:

        Route::get('tags/{slug}', 'Api\TagController@show');


    9. in app > Http > Controllers > Api > TagController.php:

        - creo il metodo show() che mi restituisce tutti i post associati al singolo tag:

            // passo lo slug con la dependancy injection
            public function show($slug) {

                // attraverso una query prendo il PRIMO tag DOVE la proprietà slug è uguale allo $slug passato come argomento del metodo INSIEME CON tutte le relazioni con la tabella posts
                $tag = Tag::where('slug', $slug)->with('posts')->first();
                
                // restituisco il tag singolo con le relazioni con i post
                return $tag;
            }


    10. in resources > js > pages creo il componente SingleTag;


    11. in resources > js > router.js:

        - importo il componente SingleTag:
        
            import SingleTag from "./pages/SingleTag";
    
        - definisco la rotta PARAMETRICA o DINAMICA che condurrà al componente SingleTag che renderizzerà la pagina del singolo tag con tutti i post ad esso associati:

            {
                // uso :slug invece di :id come parametro dinamico (diverso per ogni singolo tag)
                path: "/tags/:slug",
                name: "single-tag",
                component: SingleTag,
            },


    12. in resources > js > pages > SingleTag:

        - imposto nei data() il singolo tag con valore null:

            data() {
                return {
                    tag: null,
                }
            },

        - all'hook created() faccio la chiamata axios all'endpoint e assegno il risultato della risposta alla chiamata come valore del tag null:

            created() {

                // imposto una chiamata Axios all'endpoint parametrico attraverso l'uso del template literal
                axios.get(`/api/tags/${this.$route.params.slug}`)
                
                .then((response) => {

                    // assegno al singolo tag il valore della risposta alla chiamata axios (response)
                    this.tag = response.data;
                })
            }

        - se ci sono (controllo v-if/v-else) stampo in pagina un elenco di tutti i tag, altrimenti un messaggio:

            <template v-if="tag.posts.length > 0">
                <div v-if="tag" class="tag-box">
                    <h1>All posts with "{{tag.name}}" tag:</h1>
                    <ul>
                        <li v-for="post in tag.posts" :key="post.id">
                            <h4>{{post.title}}</h4>
                        </li>
                    </ul>
                </div>
            </template>
            <div v-else>
                <h2>There are no related posts</h2>
            </div>
