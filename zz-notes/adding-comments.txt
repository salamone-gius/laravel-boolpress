------------------------------------- ADD COMMENTS ---------------------------------------

1. creo la tabella comments:

    php artisan make:migration create_comments_table

2. in database > migrations > 2022_08_02_144602_create_comments_table creo le colonne della nuova tabella:

    public function up()
    {
        Schema::create('comments', function (Blueprint $table) {
            $table->id();
            // aggiungo la colonna foreign key relativa alla tabella 'posts' (post_id) in modo che se il post viene cancellato vengono cancellati tutti i commenti relativi
            $table->foreignId('post_id')->constrained()->onDelete('cascade');
            // aggiungo la colonna relativa al nome dell'autore settandola nullable
            $table->string('author', 80)->nullable();
            // aggiungo la colonna relativa al testo del commento
            $table->text('content');
            // aggiungo la colonna con il valore booleano che gestirà l'approvazione o meno del commento settandolo 'false' di default
            $table->boolean('is_approved')->default(false);
            $table->timestamps();
        });
    }

3. creo le colonne a db:

    php artisan migrate

4. creo il Model della tabella comments:

    php artisan make:model Comment

5. vado a mappare la relazione tra la tabella posts e la tabella comments nei loro Model:

    - in app > Post.php:

        // creo un metodo pubblico che si chiama come la tabella dipendente (al plurale in caso di relazione uno a molti)
        public function comments() {

            // traduzione: restituisci $questoModel(un singolo post) che HA MOLTI ('il Model legato') (commenti)
            return $this->hasMany('App\Comment');
        }

    - in app > Comment.php:

        // creo un metodo pubblico che si chiama come la tabella principale (al singolare in caso di relazione uno a molti)
        public function post() {

            // traduzione: restituisci $questoModel(un singolo commento) che APPARTIENE A ('il Model legato') (un singolo post)
            return $this->belongsTo('App\Post');
        }

6. creo un controller Api per i commenti:

    php artisan make:controller Api/CommentController

7. in routes > api.php definisco la rotta POST dinamica/parametrica (a cui punterà il form di aggiunta del commento del SinglePost) che deve restituire i dati del form e il post associato:

    Route::post('comments/{post_id}', 'Api\CommentController@store');

8. in app > Http > Controllers > Api > CommentController.php inserisco il metodo store() e le relative istruzioni che mi servono per immagazzinare i dati del form a db:

    // importo la Facades di supporto per le validazioni manuali
    use Illuminate\Support\Facades\Validator;

    // importo il Model dei commenti
    use App\Comment;

    class CommentController extends Controller
    {
        // passo come argomento del metodo store() l'id del post in oggetto
        public function store(Request $request, $post_id) {

            // prendo tutti i dati dalla request e li salvo in $data
            $data = $request->all();

            // salvo l'id del post corrente
            $data['post_id'] = $post_id;

            // valido in dati in ingresso con una validazione manuale (il metodo validate() restituisce sempre un redirect che in questo caso non mi serve)
            $validator = Validator::make($data, [
                'author' => 'nullable|string|max:80',
                'content' => 'required|string',
                'post_id' => 'exists:posts,id',
            ]);
            
            if ($validator->fails()) {
                return response()->json([
                    "errors" => $validator->errors()
                ], 400);
            }

            // creo il nuovo commento a db
            $newComment = new Comment();

            // imposto quali dati e come devono essere inseriti a db
            $newComment->post_id = $data['post_id'];
            $newComment->author = $data['author'];
            $newComment->content = $data['content'];

            // salvo il nuovo commento a db
            $newComment->save();

            // restituisco una risposta json positiva
            return $newComment;
        }
    }

9. in resources > js > pages > SinglePost.vue 

    - nel template creo un form, la relativa logica e i doverosi controlli per l'inserimento dei commenti relativi al post:

        <form @submit.prevent="addComment()" action="">
            <div>
                <input type="text" name="author" placeholder="Insert your name" v-model="formData.author">
                <span>
                    <ul v-if="errors.author">
                        <!-- ciclo due volte poiché la struttura degli errors è: errors (oggetto) > errorMessages (array) > error (stringa)-->
                        <li v-for="(errorMessages, index) in errors" :key="index">
                            <div v-for="(error, index) in errorMessages" :key="index">
                                <h3 style="color: red;">{{error}}</h3>
                            </div>
                        </li>
                    </ul>
                </span>
            </div>
            <div>
                <textarea name="content" id="content" cols="30" rows="10" placeholder="Insert your comment" class="my-3" v-model="formData.content"></textarea>
                <span>
                    <ul v-if="errors.content">
                        <!-- ciclo due volte poiché la struttura degli errors è: errors (oggetto) > errorMessages (array) > error (stringa)-->
                        <li v-for="(errorMessages, index) in errors" :key="index">
                            <div v-for="(error, index) in errorMessages" :key="index">
                                <h3 style="color: red;">{{error}}</h3>
                            </div>
                        </li>
                    </ul>
                </span>
            </div>
            <div>
                <button type="submit" class="p-2">Add Comment</button>
            </div>
            <div v-if="commentSent" class="mt-3" style="color: green; border: 1px solid green; width: 30%;">
                <h4 style="text-align: center;">Comment under approval</h4>
            </div>
        </form>

    - nello script, all'interno dei data() imposto i valori dei dati da prendere dal form attraverso il v-model:

        data() {
            return {

                // per trasferire i dati inseriti nel form dei commenti attraverso axios, devo salvarli nei data() settandoli come stringhe vuote e predispongo i campi da prendere (in html) attraverso il v-model
                formData: {
                    author: '',
                    content: '',
                },

                // salvo i messaggi di errore in un oggetto vuoto 'errors'
                errors: {},

                // setto l'informazione relativa al corretto inserimento del commento come 'false'
                commentSent: false,
            };
        },

    - nello script creo un metodo che gestisce il flusso dei dati da backend a frontend:

        methods: {

            // definisco il metodo che al submit farà la richiesta axios per spedire (POST) i dati al backoffice
            addComment() {

                // richiesta axios di tipo POST (axios.post) all'endpoint (`/api/comments/${this.post.id}`) che spedirà i dati del form (this.formData) a db
                axios.post(`/api/comments/${this.post.id}`, this.formData)

                .then((response) => {

                    // cambio il valore della variabile commentSent in true in modo da mostrare il messaggio
                    this.commentSent = true;
                    
                    // svuoto il form
                    this.formData.author = '';
                    this.formData.content = '';
                })

                // in caso di validazione fallita, salvo i messaggi di errore nella variabile 'errors'
                .catch((error) => {
                    this.errors = error.response.data.errors;
                });
            },
        },

10. creo un controller con namespace Admin per gestire i commenti a backoffice:

    php artisan make:controller Admin/CommentController

11. in app > Http > Controllers > Admin > CommentController.php:

    - importo la Facades che mi restituisce l'utente loggato:

        use Illuminate\Support\Facades\Auth;

    - importo il Model dei commenti:

        use App\Comment;

    - creo un metodo index() che restituisce una view che mostra la lista di tutti i commenti da approvare:

        public function index() {

            // salvo in $user_id l'id dell'utente attualmente loggato
            $user_id =Auth::id();

            // salvo in $comments i commenti da approvare relativi all'autore che è loggato
            // whereHas() permette di fare sub-query con la tabella relazionata posts (utilizzando il nome del metodo)
            // la funzione use() permette di prendere variabili al di fuori dello scope
            $comments = Comment::whereHas('post', function($q) use($user_id) {
                $q->where('user_id', $user_id);
            })->where('is_approved', false)->get();

            // restituisco una view che mostra i commenti da approvare e i commenti formattati
            return view('admin.comments.index', compact('comments'));
        }

    - creo un metodo update(), passando come argomento il singolo commento, che modifica a db il campo 'is_approved' della tabella 'comments' da false in true:

        public function update(Comment $comment) {

            // cambia il valore del campo 'is_approved' della tabella 'comments' da false a true
            $comment->is_approved = true;

            // salvo la modifica a db
            $comment->save();

            // restituisco un reindirizzamento alla pagina con tutti i commenti da approvare
            return redirect()->route('admin.comments.index');
        }

    - creo un metodo destroy(), passando come argomento il singolo commento, che cancella il commento:

        public function destroy(Comment $comment) {

            // cancello il commento
            $comment->delete();

            // restituisco un reindirizzamento alla pagina con tutti i commenti da approvare
            return redirect()->route('admin.comments.index');
        }

12. in resources > views > admin creo una cartella 'comments' in cui creo la pagina index.blade.php;

13. in routes > web.php, nel middleware auth, definisco le rotte che puntano ai metodi del CommentController che mi servono:

    // aggiungo la rotta per il metodo index() del CommentController
    Route::get('comments', 'CommentController@index')->name('comments.index');

    // aggiungo la rotta parametrica/dinamica per il metodo update() del CommentController passando il singolo commento
    Route::patch('comments/{comment}', 'CommentController@update')->name('comments.update');

    // aggiungo la rotta parametrica/dinamica per il metodo update() del CommentController passando il singolo commento
    Route::delete('comments/{comment}', 'CommentController@destroy')->name('comments.destroy');

14. in resources > views > layouts > app.blade.php aggiungo un link alla navbar che punta alla rotta che mostra la pagina con i commenti da approvare:

    <a class="navbar-brand" href="{{ route('admin.comments.index') }}">
        Comments to approve
    </a>

15. in resources > views > admin > comments > index.blade.php creo la pagina con l'elenco dei commenti da approvare e le azioni per approvare o cancellare un commento:

    @extends('layouts.app')

    @section('content')
    <div class="container">
        <div class="card">
            <div class="card-header">
                <h1>Comments to approve</h1>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th scope="col" class="text-center">#</th>
                            <th scope="col" class="text-center">Post Title</th>
                            <th scope="col" class="text-center">Author</th>
                            <th scope="col" class="text-center">Content</th>
                            <th scope="col" class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach ($comments as $comment)
                            <tr>
                                <td>{{$comment->id}}</td>

                                {{-- accedo alle informazioni del post associato attraverso il metodo post() definito nel Model Comment che instaura la relazione tra la tabella posts e la tabella comments --}}
                                <td>{{$comment->post->title}}</td>
                                <td>{{$comment->author}}</td>
                                <td>{{$comment->content}}</td>
                                <td style="min-width: 350px;">

                                    {{-- creo un form con metodo POST la cui action è la spedizione dell'informazione alla rotta update per la modifica del campo 'is_approved' in true (approvazione del commento) --}}
                                    <form action="{{route('admin.comments.update', $comment->id)}}" method="POST" class="d-inline-block">

                                        {{-- aggiungo il token di validazione --}}
                                        @csrf

                                        {{-- aggiungo il metodo PATCH perchè il campo da modificare è un solo (altrimenti PUT) --}}
                                        @method('PATCH')

                                        <button type="submit" href="" class="btn btn-success">Approve comment</button>

                                    </form>

                                    {{-- creo un form con metodo POST la cui action è la spedizione dell'informazione alla rotta destroy per la cancellazione del commento a db --}}
                                    <form action="{{route('admin.comments.destroy', $comment->id)}}" method="POST" class="d-inline-block">

                                        {{-- aggiungo il token di validazione --}}
                                        @csrf

                                        {{-- aggiungo il metodo DELETE --}}
                                        @method('DELETE')

                                        <button type="submit" href="" class="btn btn-danger">Delete comment</button>
                                    </form>
                                </td>
                            </tr>
                        @endforeach
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    @endsection

16. in app > Http > Controllers > Api > PostController.php, nel metodo show(), attraverso una sub-query, aggiungo la tabella 'comments' tra le relazioni della tabella 'posts' nella query:

    $post = Post::where('slug', $slug)->with(['category', 'tags', 'user', 'comments' => function($q) {
        $q->where('is_approved', true);
    }])->first();

17. in resources > js > pages > SinglePost.vue stampo a frontoffice i commenti approvati con i doverosi controlli e cicli:

    <ul v-if="post.comments.length > 0">
        <h4 class="my-3">Comments:</h4>
        <li v-for="comment in post.comments" :key="comment.id">
            <div class="comment-box">
                <h4 class="mb-2">Comment from {{comment.author ? comment.author : "anonymous"}}:</h4>
                <div>{{comment.content}}</div>
            </div>
        </li>
    </ul>
