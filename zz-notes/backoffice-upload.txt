------------------------------------- LOCAL UPLOAD IMAGE (doc: file storage) ---------------------------------------

Laravel mette a disposizione la classe Facades Storage che gestisce il processo di upload.
Posso salvare i file fisicamente all'interno dell'applicativo (in locale) o affidarli a servizi terzi (in cloud).
Per l'upload in cloud basterà configurare il file .env.
I file uploadati in locale saranno pubblici perché dovranno essere fruibili anche dall'esterno del backoffice.
In config > filesystems.php trovo tutte le informazioni relative allo storage.


1. in .env, alla fine, aggiungo un'altra variabile d'ambiente che cambierà il luogo di storage di default (FILESYSTEM_DRIVER) da 'local' a 'public':

    FILESYSTEM_DRIVER=public

2. ogni volta che modifico qualcosa nel file .env devo lanciare il comando per aggiornare la cache:

    php artisan config:clear

3. SEMPRE all'inizio di ogni progetto o quando clono una repo (solo una volta), devo creare un symlink "storage", ovvero un collegamento tra la cartella storage > app> public (dove salvo i file) e la cartella public > storage:
    
    php artisan storage:link

4. creo una colonna nella tabella posts dove salverò il path dell'img e il nome del file:

    php artisan make:migration add_column_image_posts_table --table=posts

5. in database > migrations > dataodierna_add_column_image_posts_table:

    - imposto nell'up() il tipo di dato che dovrà popolare la nuova colonna:

        public function up()
        {
            Schema::table('posts', function (Blueprint $table) {
                
                $table->string('image')->nullable();
            });
        }

    - imposto nel down() l'istruzione su come distruggere la nuova colonna:

        public function down()
        {
            Schema::table('posts', function (Blueprint $table) {
                
                $table->dropColumn('image');
            });
        }

6. lancio il comando per creare effetivamente la nuova colonna a db:

    php artisan migrate

6.bis per annullare l'ultima migration lanciata:

    php artisan migrate:rollback

7. in resources > views > admin > posts > create.blade.php:

    - inserisco l'attributo che permette al form di inviare a db il file vero e proprio e non una semplice stringa:

        <form action="{{route('admin.posts.index')}}" method="POST" enctype="multipart/form-data">
            @csrf

    - inserisco il form per l'inserimento del nuovo dato in ingresso (path dell'immagine):

        <div class="form-group">
            <label for="image">Image</label>
            <input type="file" class="form-control-file @error('image') is-invalid @enderror" id="image" name="image" value="{{old('image')}}">
            @error('image')
                <div class="alert alert-danger">{{$message}}</div>
            @enderror
        </div>

8. in app > Http > Controllers > Admin > PostController.php, nel metodo store():

    - visto che è codice duplicato, inserisco la parte di validazione in un metodo privato che andrò poi a richiamare nei metodi store() e update():

        private $validation = [
            // passo al metodo validate() un array associativo in cui la chiave sarà il dato che devo controllare e come valore le caratteristiche che quel dato deve avere per poter "passare" la validazione (vedi doc: validation)
            'title' => 'required|string|max:255',
            'content' => 'required|string|max:65535',
            'published' => 'sometimes|accepted',
            'category_id' => 'nullable|exists:categories,id',
            'tag_id' => 'nullable|exists:tags,id',
            'image' => 'nullable|image|max:500',
        ];

    - nel metodo store(), nel metodo validate() della $request, passo il nuovo metodo $validation con tutti i dati da validare:

        $request->validate($this->validation);

    - aggiungo un controllo sulla presenza del file da storare:

        // SE il dato è settato (se c'è un'immagine)...
        if (isset($data['image'])) {
            // ...il valore di image della tabella post sarà il percorso del filesystem dove si trova l'immagine (il metodo put() fa il salvataggio fisico del file all'interno del file system e restituisce il path)
            $newPost->image = Storage::put('uploads', $data['image']); 
        }

    - se da errore relativo al MIME, bisogna scommentare un riga nel file php.ini:

        - lanciare dal terminale il comando per trovare il file php.ini:

            php --ini

        - nel file php.ini scommento riga 917:

            extension=fileinfo

    - se tutto è andato a buon fine, troviamo fisicamente il nuovo file uploadato in storage > public > uploads. Laravel trasforma in hash il nome del file, per evitare che ci possano essere conflitti causati da file con lo stesso nome;

    - aggiungo l'attributo image_path all'oggetto post senza modificare il dato originale a db attraverso un accesso (doc: Eloquent: Mutators):

        // definisco il nuovo attributo che voglio aggiungere senza modificare fisicamente il dato a db
        protected $appends = ['image_path'];

        // aggiungo ad ogni post l'attributo image_path attraverso un accessor (metodo getImagePathAttribute()) che aggiunge l'attributo ma lascia immutato il dato a db
        public function getImagePathAttribute() {
            // aggiungo un controllo: restituisco $this->image SE (?) esiste, ALTRIMENTI (:) lo setto a null
            return $this->image ? asset("storage/{$this->image}") : null;
        }

9. in resources > views > admin > posts > show.blade.php inserisco la sezione per la visualizzazione dell'immagine legata al post. Nell'src dell'img, inserisco, attraverso il metodo asset(), il percorso per recuperare i files dalla cartella public. Aggiungo con un controllino per verificarne l'esistenza:

    @if($post->image)
    <img src="{{asset("storage/{$post->image}")}}" alt="" style="width: 100%;">
    @endif

10. in resources > js > pages > SinglePost.vue stampo (se c'è) l'informazione a livello di frontoffice:

    <img v-if="post.image_path" :src="post.image_path" :alt="post.title">
    
11. in app > Http > Controllers > Admin > PostController.php, aggiungo un controllo nel metodo delete() in modo che, quando viene cancellato il post, viene eliminata anche l'immagine associata:

    if ($post->image) {
        Storage::delete($post->image);
    }
