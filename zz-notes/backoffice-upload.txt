------------------------------------- LOCAL UPLOAD IMAGE (doc: file storage) ---------------------------------------

Laravel mette a disposizione la classe Facades Storage che gestisce il processo di upload.
Posso salvare i file fisicamente all'interno dell'applicativo (in locale) o affidarli a servizi terzi (in cloud).
Per l'upload in cloud basterà configurare il file .env.
I file uploadati in locale saranno pubblici perché dovranno essere fruibili anche dall'esterno del backoffice.
In config > filesystems.php trovo tutte le informazioni relative allo storage.


1. in .env, alla fine, aggiungo un'altra variabile d'ambiente che cambierà il luogo di storage di default (FILESYSTEM_DRIVER) da 'local' a 'public':

    FILESYSTEM_DRIVER=public

2. ogni volta che modifico qualcosa nel file .env devo lanciare il comando per aggiornare la cache:

    php artisan config:clear

3. SEMPRE all'inizio di ogni progetto o quando clono una repo (solo una volta), devo creare un symlink "storage", ovvero un collegamento tra la cartella storage > app> public (dove salvo i file) e la cartella public > storage:
    
    php artisan storage:link

4. creo una colonna nella tabella posts dove salverò il path dell'img e il nome del file:

    php artisan make:migration add_column_image_posts_table --table=posts

5. in database > migrations > dataodierna_add_column_image_posts_table:

    - imposto nell'up() il tipo di dato che dovrà popolare la nuova colonna:

        public function up()
        {
            Schema::table('posts', function (Blueprint $table) {
                
                $table->string('image')->nullable();
            });
        }

    - imposto nel down() l'istruzione su come distruggere la nuova colonna:

        public function down()
        {
            Schema::table('posts', function (Blueprint $table) {
                
                $table->dropColumn('image');
            });
        }

6. lancio il comando per creare effetivamente la nuova colonna a db:

    php artisan migrate

6.bis per annullare l'ultima migration lanciata:

    php artisan migrate:rollback
